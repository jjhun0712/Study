2020.02.14

Ansible 
Provision & configuration management tool
간편한 에이전트리스 IT 자동화 기술
Red Hat Ansible Automation은 
Red Hat Ansible Engine과 
Red Hat Ansible Tower로 지원되는 자동화 
소프트웨어로, Red Hat Ansible Engine은 
IT 환경 및 프로세스의 모든 측면을 자동화할 
수 있는 수백 가지 모듈로 이루어진 실행 
엔진이며 Red Hat Ansible Tower는 
다른 서비스와 통합될 수 있는 관리 
인터페이스입니다.

앤서블의 역할
리눅스에서 동일한 환경을 구성하기 위해서 사용하는 가장 기초적인 방법은 Bash 쉘 스크립트이다. 많은 개발자들은 각종 패키지의 설치, 설정 파일의 수정 등을 위해 일괄 처리 목록을 쉘 스크립트에 나열하고 이를 실행해 본 경험이 있을 것이다. 그러나 클러스터에 존재하는 많은 서버들에 동시에, 동일한 환경을 배포해야 하는 상황에서 Bash 쉘 스크립트는 분명 한계점을 가진다. (물론 사용할 수도 있지만 Bash 쉘 스크립트는 그러한 목적을 위해서 존재하는 것은 아니며, 여러 서버를 제어하는 규격화된 양식이 존재하지 않아 설령 그러한 기능을 구현하더라도 개개인 모두가 다른 템플릿을 정의해 사용하게 될지도 모른다)
이를 위해 고안된 것이 Infrastructure as a Code라는 개념이며, 이는 환경의 배포와 구성을 규격화된 코드로 정의해 사용하는 것을 의미한다. 즉, Infrastructure as a Code의 개념을 내포하는 각종 환경 자동화 도구는 인프라의 상태를 코드로 선언하고 이를 모든 서버에 배포함으로써 특정 환경을 동일하게 유지할 수 있도록 돕는다. 그러한 환경 자동화 도구의 대표적인 예시가 앤서블이며, 앤서블은 환경의 배포뿐만 아니라 서버 클러스터의 체계적인 관리, 확장 가능한 모듈의 사용 등 다양한 측면에서 사용될 수 있는 도구로서 많은 개발자들에게 사랑받고 있다. 

장점 및 선택 하는 이유
빠른 SSH 통신, 빠른 provision이 가능
추후 상용 환경에서 사용할 때 agent 기반이면
방화벽 이슈, agent 데몬 관리라는 불편한 점이 존재
(agent 방식은 확장성, 대규모 프로비전을
할 경우 매우 효과적이지만 서버와 통신하는
부분이 고도화되기 때문에 빠르고 간단하게
프로비전이 가능하다)
자동 배포 환경이 쉽다
개발 가능성이 높은 오픈소스이다
멱동성을 제공한다

 멱동성 
 연산을 여러 번 적용하더라도 결과가 
 달리지지 않는 성질을 멱동성이라고 한다.
 바뀌는 것이 없으면 당연히 배포되어도 바뀌지 않음
 바뀌는 부분이 있으면 그 부분만 반영
 shell, command, file module은 보장 안됨

 Ansible에서 멱동성
 여러 번 ansible 툴을 사용하더라도 동일한
결과값을 나올 수 있도록 제공되는 형태여야 한다.
매번 다른 결과가 나오거나 에러가 나온다면 
비 멱동성하다고 할 수 있다.
Ansible 툴의 거의 대부분의 모듈은 멱동성을 제공하며
멱동성을 제공하기 위해서 조건절을 제공하고 있다.

예들 들면, 처음 ansible 스크립트를 실행 후 다시 실행을
하면 상황에 따라서는 파일이 append가 될 수 있다.
그러나 멱등성의 원칙은 언제나 실행은 해도 결과가 동일하게 나온다.
또한 파일/디렉터리를 생성 또는 삭제하는 'create', 'remove' 같은
ansible 모듈을 실행 할 때 'when' 조건절을 이용할 수 있다.

앤서블의 기본 개념
앤서블에는 크게 3가지 요소가 있다.
인벤터리, 플레이북, 모듈이 그것이다.
어디서     무엇을    어떻게 수행 할지를 정의한다.
엄밀히 말하면 모듈이 플레이북에서 사용되지만
이해를 위해 구분해 설명한다.

Ansible의 환경설정, 배포를 가능케 하는 언어이다.
리모트 서버에 접속해서 무언가를 시행시키는 정책을 기술합니다.

Yaml 문법으로 정책이 기술되어 있으며 좀 더 고급 단계에서는 
로드밸런서를 모니터링하는 복잡한 환경에서 사용할 수 있도록 한다.
각 playbook은 하나 또는 하나 이상의 'play'를 두게 된다. 
play의 목적은 여러 호스트들에 잘 정의된 'role'과 'task'를 
매핑하기 위한 역할을 한다.
Task는 ansible 모듈의 호출을 의미합니다.
Role을 좀더 편하게 관리하기 위해서는 미리
정의된 yaml 파일을 include 하는 것이 가능하다

또한 host inventory 파일에 정의한 서버 그룹별로
각각 나누어 provision 할 수 있도록 할 수 있다.
서버당 디렉터리를 나누어서 각각의 설정 정보가
정의된 파일을 읽어 설치하게 한다.

playbook
플레이북은 애드훅 테스트 실행 모드와는
완벽하게 다른 사용방법이며 특히 강력한
사용 방법이다. 간단히 말해 플레이북은 정말 
간단하게 설정을 관리하고 다수의 머신에 대한 
배포 시스템에 대한 기본적인 단위이다. 
플레이북은 설정을 정의할 수 있으며 특정 
머신의 집합을 오가며 다른 작업을 수행하도록
수동으로 작업 순서를 설정하는 것도 가능하다.
이때에 작업은 동기 또는 비동기로 수행할 수 있다.
/usr/bin/ansible 명령을 통한 애드혹 테스크를
실행하는 것에 반해 플레이북은 소스 컨트롤을
통해 보관하거나 사용자의 설정을 내보내거나 원격 
시스템을 구성, 보장되는데 더욱 적합하다.

Ad-hoc
Adhoc이라는 의미는 임시적으로 수행한다는 의미이다.
Ansible의 playbook을 작성하여 수행하는 것이
아니라 임시적으로나 또는 특별하게 어떤 작업을
수행하기 위해서 사용할 수 있는 실행방법

인벤터리(Inventory)
인벤터리는 앤서블에 의해 제어되어
IaC의 대상이 될 서버들의 목록을 정의하는
파일이다. 일반적으로 hosts.ini 파일에 정의해 사용하며
여러 서버들의 접속 정보 (SSH 접근 IP, 포트, 리눅스 사용자)
등을 정의한다.


리모트 서버에 대한 meta 데이터를 기술하는 파일이다
Ansible에서는 inventory 파일에는 yaml을 적용하지 않는다.
기본 파일은 /etc/ansible/hosts를 읽게 하거나
따로 inventory 파일을 만들고 옵션을 주어 동작하게 할 수 있다.
만약 고정 IP를 가지고 있고 gosts 파일 안에 들어가 있지 않는 서버가
있다면 설정 파일을 만들수 있고 테스트 환경을 만들때 유용하다.

Ansible의 한계
시스템의 초기 설치 수행은 불가능
(kickstart, pxe 등을 사용하여야 함)
시스템 모니터링은 지원하지 않음
시스템 변경사항은 추적하지 않음

앤서블 시작하기
앤서블 사용 환경 준비
모든 애플리케이션이 그러하듯이, 앤서블 
또한 서버와 클라이언트 구조로 되어있다. 
그러나 셰프나 퍼펫과는 다르게 앤서블은 
에이전트가 없는 구조이기 때문에 별도의 
에이전트 설치가 필요 없다는 장점이 있다. 
기존의 에이전트 역할을 SSH 데몬이 대체하기 
때문에 SSH 접속만 가능한 서버라면 앤서블의 
제어 대상이 될 수 있다.

한 VM에서 앤서블 커맨드를 실행하고, 
다른 VM이 SSH 데몬을 통해 제어되는 구조이다.
두 VM은 Virtual Box의 호스트 전용 브릿지를 
이용해 상호 통신이 가능한 상태이다.
두 VM은 SSH 데몬이 실행중이며 SSH로 
접속 가능한 상태이다.






