이 운용 모델에서는 크게 나눠 4가지 종류의 브랜치를 이용하여 개발을 
진행합니다.

메인 브랜치(Main branch)
피처 브랜치(Feature branch) 또는 토픽 브랜치(Topic branch)
릴리스 브랜치(Release branch)
핫픽스 브랜치(Hotfix branch)


메인 브랜치(Main branch)
'master' 브랜치와 'develop' 브랜치, 이 두 종류의 브랜치를 보통 메인 
브랜치로 사용합니다.

master
'master' 브랜치에서는, 배포 가능한 상태만을 관리합니다. 커밋할 때에는
태그를 사용하여 배포 번호를 기록합니다.
develop
'develop' 브랜치는 앞서 설명한 통합 브랜치의 역할을 하며, 평소에는 이
브랜치를 기반으로 개발을 진행합니다.

피처 브랜치(Feature branch)
피처 브랜치는, 앞서 설명한 토픽 브랜치 역할을 담당합니다.

이 브랜치는 새로운 기능 개발 및 버그 수정이 필요할 때에 'develop' 
브랜치로부터 분기합니다. 피처 브랜치에서의 작업은 기본적으로 
공유할 필요가 없기 때문에, 원격으로는 관리하지 않습니다. 개발이 
완료되면 'develop' 브랜치로 병합하여 다른 사람들과 공유합니다.

릴리즈 브랜치(Release branch)
릴리즈 브랜치에서는 버그를 수정하거나 새로운 기능을 포함한 상태로 
모든 기능이 정상적으로 동작하는지 확인합니다. 릴리즈 브랜치의 
이름은 관례적으로 브랜치 이름 앞에 'release-' 를 붙입니다. 이 때, 
다음 번 릴리즈를 위한 개발 작업은 'develop' 브랜치 에서 계속 진행해 
나가면 됩니다.

릴리즈 브랜치에서는 릴리즈를 위한 최종적인 버그 수정 등의 개발을 
수행합니다. 모든 준비를 마치고 배포 가능한 상태가 되면 'master' 
브랜치로 병합시키고, 병합한 커밋에 릴리즈 번호 태그를 추가합니다.

릴리즈 브랜치에서 기능을 점검하며 발견한 버그 수정 사항은 'develop' 
브랜치에도 적용해 주어야 합니다. 그러므로 배포 완료 후 'develop' 
브랜치에 대해서도 병합 작업을 수행합니다.

핫픽스 브랜치(Hotfix branch)
배포한 버전에 긴급하게 수정을 해야 할 필요가 있을 경우, 'master' 
브랜치에서 분기하는 브랜치입니다. 관례적으로 브랜치 이름 앞에 
'hotfix-'를 붙입니다.

예를 들어 'develop' 브랜치에서 개발을 한창 진행하고 있는 도중에 
이전에 배포한 소스코드에 아주 큰 버그가 발견되는 경우를 생각해 
보세요. 문제가 되는 부분을 빠르게 수정해서 안정적으로 다시 배포해야 
하는 상황입니다. 'develop' 브랜치에서 문제가 되는 부분을 수정하여 
배포 가능한 버전을 만들기에는 시간도 많이 소요되고 안정성을 
보장하기도 어렵습니다. 그렇기 때문에 바로 배포가 가능한 'master' 
브랜치에서 직접 브랜치를 만들어 필요한 부분 만을 수정한 후 다시 
'master'브랜치에 병합하여 이를 배포하려고 하는 것이죠.

이 때 만든 핫픽스 브랜치에서의 변경 사항은 'develop' 브랜치에도 
병합하여 문제가 되는 부분을 처리해 주어야 합니다.